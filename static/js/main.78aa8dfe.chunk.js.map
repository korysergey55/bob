{"version":3,"sources":["utils/paths.ts","components/Loader/styles.module.scss","sources/images/404.jpg","components/NotFound/styles.module.scss","config.ts","stores/itemsStore.ts","stores/index.ts","utils/history.ts","components/PrivateRoute/index.tsx","components/Loader/index.tsx","components/NotFound/index.tsx","containers/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["paths","home","module","exports","axios","create","baseURL","process","REACT_APP_HOST","interceptors","response","use","error","Promise","reject","makeAutoObservable","this","reaction","titleId","_","console","log","toJS","data","activeTitle","observable","action","configure","enforceActions","RootStore","ItemsStore","rootStore","createContext","createBrowserHistory","PrivateRoute","path","exact","component","to","Loader","className","styles","loader","type","color","height","width","timeout","loadingText","NotFoundComponent","title","img","notFoundImg","history","useHistory","container","wripper","src","alt","rigthSide","subtitle","text","buttonBackHome","onClick","push","HomePage","lazy","App","store","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAA,kCAAO,IAAMA,EAAQ,CACnBC,KAAM,M,mBCARC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,8B,mBCDhED,EAAOC,QAAU,IAA0B,iC,sDCC3CD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,QAAU,wBAAwB,IAAM,oBAAoB,UAAY,0BAA0B,MAAQ,sBAAsB,SAAW,yBAAyB,KAAO,qBAAqB,eAAiB,iC,+ECCtPC,EAAMC,OAAO,CAC9BC,QAASC,iIAAYC,iBAMnBC,aAAaC,SAASC,KACxB,SAAAD,GAEE,OAAOA,KAET,SAAAE,GAEE,OAAOC,QAAQC,OAAOF,M,8FCcX,M,aAfb,aAAe,IAAD,qGACZG,YAAmBC,MACnBC,aACE,kBAAM,EAAKC,WACX,SAAAC,GAAC,OAAIC,QAAQC,IAAI,OAAQC,YAAK,EAAKJ,a,8CAGvC,SAAmBK,GACjBP,KAAKE,QAAUK,I,4BAEjB,WACEP,KAAKQ,aAAeR,KAAKQ,gB,0CAd1BC,K,wEAA6B,M,yCAC7BA,K,yEAAkC,K,sCASlCC,K,iHAGAA,K,8ECrBHC,YAAU,CAAEC,eAAgB,a,IAEtBC,G,kHACHJ,K,yEAAwBK,K,GAGrBC,EAAY,IAAIF,EAYP,GAVaG,wBAAyBD,GAUtC,IAAIF,G,OCpBJI,gB,uBCaAC,EATqB,SAAC,GAA+B,EAA7BC,KAA6B,EAAvBC,MAAuB,EAAhBC,UAElD,OACE,kBAAC,IAAD,CAAUC,GAAItC,IAAMC,Q,kCCUTsC,EAfU,WACvB,OACE,yBAAKC,UAAWC,IAAOC,QACrB,kBAAC,IAAD,CACEC,KAAK,UACLC,MAAM,WACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,MAEX,wBAAIP,UAAWC,IAAOO,aAAtB,gB,iCC0BSC,EA7B6B,SAAC,GAGtC,IAAD,IAFJC,aAEI,MAFI,6CAEJ,MADJC,WACI,MADEC,IACF,EACEC,EAAUC,cAChB,OACE,uBAAKd,UAAWC,IAAOc,WACrB,uBAAKf,UAAWC,IAAOe,SACrB,uBAAKhB,UAAWC,IAAOU,IAAKM,IAAKN,EAAKO,IAAI,gBAC1C,uBAAKlB,UAAWC,IAAOkB,WACrB,sBAAInB,UAAWC,IAAOS,OAAtB,OACA,sBAAIV,UAAWC,IAAOmB,UAAWV,GACjC,qBAAGV,UAAWC,IAAOoB,MAArB,2FAIA,0BACElB,KAAK,SACLH,UAAWC,IAAOqB,eAClBC,QAAS,kBAAMV,EAAQW,KAAKhE,IAAMC,QAHpC,oBClBJgE,EAAWC,gBAAK,kBAAM,gCAkBbC,EAhBH,WACV,OACE,kBAAC,IAAaC,EACZ,kBAAC,IAAD,CAAQf,QAASA,GACf,kBAAC,WAAD,CAAUgB,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcjC,OAAK,EAACD,KAAK,WAAWE,UAAW,KAC/C,kBAAC,IAAD,CAAOD,OAAK,EAACD,KAAK,IAAIE,UAAW4B,IACjC,kBAAC,IAAD,CAAO7B,OAAK,EAACD,KAAK,OAAOE,UAAWY,SCP5BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.78aa8dfe.chunk.js","sourcesContent":["export const paths = {\n  home: '/',\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"styles_loader__3UIYn\",\"loadingText\":\"styles_loadingText__1hDdQ\"};","module.exports = __webpack_public_path__ + \"static/media/404.dff0fa0a.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__UZ1HY\",\"wripper\":\"styles_wripper__3emqs\",\"img\":\"styles_img__2uh5Z\",\"rigthSide\":\"styles_rigthSide__2pvnv\",\"title\":\"styles_title__1Y1_7\",\"subtitle\":\"styles_subtitle__3Gsgs\",\"text\":\"styles_text__3039U\",\"buttonBackHome\":\"styles_buttonBackHome__3UaE-\"};","import axios from 'axios'\n\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_HOST,\n})\n\n// here you can define constant's for project or inintial configuration for packages\n\n// response middleware\napi.interceptors.response.use(\n  response => {\n    // here you can check authorized user or not (401) or something global response functions\n    return response\n  },\n  error => {\n    // api error handler\n    return Promise.reject(error)\n  }\n)\n","import {\n  makeAutoObservable,\n  observable,\n  action,\n  reaction,\n  toJS,\n  configure,\n  computed,\n  runInAction,\n} from 'mobx'\n\nclass ItemsStore {\n  @observable titleId: string = ''\n  @observable activeTitle: boolean = false\n\n  constructor() {\n    makeAutoObservable(this)\n    reaction(\n      () => this.titleId,\n      _ => console.log('mobx', toJS(this.titleId))\n    )\n  }\n  @action setTitleId(data: string) {\n    this.titleId = data\n  }\n  @action setActiveTitle() {\n    this.activeTitle = !this.activeTitle\n  }\n}\n\nexport default new ItemsStore()\n","import { createContext, useContext } from 'react'\nimport { configure, observable } from 'mobx'\nimport ItemsStore from './itemsStore'\n\nconfigure({ enforceActions: 'observed' })\n\nclass RootStore {\n  @observable ItemsStore = ItemsStore\n}\n\nconst rootStore = new RootStore()\n\nexport const StoreContext = createContext<RootStore>(rootStore)\n\nexport const useStore = (): RootStore => {\n  const store = useContext(StoreContext)\n  if (!store) {\n    throw new Error('You have forgot to use StoreProvider, shame on you.')\n  }\n  return store\n}\n\nexport default new RootStore()\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()\n","import React from 'react'\nimport { useStore } from 'stores'\nimport { Route, Redirect } from 'react-router-dom'\nimport { paths } from 'utils/paths'\n\nconst accessToken = true\nconst PrivateRoute: React.FC<any> = ({ path, exact, component }) => {\n  // const { authAPI } = useStore()\n  return accessToken ? (\n    <Redirect to={paths.home} />\n  ) : (\n    <Route path={path} exact={exact} component={component} />\n  )\n}\n\nexport default PrivateRoute\n","import React from 'react'\nimport styles from './styles.module.scss'\nimport Load from 'react-loader-spinner'\n\nconst Loader: React.FC = () => {\n  return (\n    <div className={styles.loader}>\n      <Load\n        type=\"Circles\"\n        color=\" #23a6d5\"\n        height={60}\n        width={60}\n        timeout={3000}\n      />\n      <h2 className={styles.loadingText}>...Loading</h2>\n    </div>\n  )\n}\n\nexport default Loader\n","import * as React from 'react'\nimport { useHistory } from 'react-router'\nimport { paths } from 'utils/paths'\nimport styles from './styles.module.scss'\nimport notFoundImg from 'sources/images/404.jpg'\n\ninterface IProps {\n  title: string\n  img: string\n}\n\nconst NotFoundComponent: React.FC<IProps> = ({\n  title = 'We Could Not Find Page You’re Looking',\n  img = notFoundImg,\n}) => {\n  const history = useHistory()\n  return (\n    <div className={styles.container}>\n      <div className={styles.wripper}>\n        <img className={styles.img} src={img} alt=\"notFoundImg\" />\n        <div className={styles.rigthSide}>\n          <h2 className={styles.title}>404</h2>\n          <h3 className={styles.subtitle}>{title}</h3>\n          <p className={styles.text}>\n            The link you’re trying to access is probably broken, or the page has\n            been removed.\n          </p>\n          <button\n            type=\"button\"\n            className={styles.buttonBackHome}\n            onClick={() => history.push(paths.home)}\n          >\n            Back to home\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NotFoundComponent\n","import React, { Suspense, lazy } from 'react'\nimport store from 'stores'\nimport history from 'utils/history'\nimport { Router, Switch, Route } from 'react-router'\nimport { Provider } from 'mobx-react'\nimport PrivateRoute from 'components/PrivateRoute'\nimport Loader from 'components/Loader'\nimport NotFoundComponent from 'components/NotFound'\n\nconst HomePage = lazy(() => import('containers/Public/HomePage/index'))\n\nconst App = () => {\n  return (\n    <Provider {...store}>\n      <Router history={history}>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <PrivateRoute exact path=\"/private\" component={''} />\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/:id\" component={NotFoundComponent} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import './config'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\n// normalize and basic styles for application\nimport 'normalize.css'\nimport 'antd/dist/antd.css'\nimport 'sources/styles/styles.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}